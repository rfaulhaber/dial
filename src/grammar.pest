// TODO see this for inspiration https://www.scheme.com/tspl2d/grammar.html

// TODO generalize such that the grammar is basically just a list of exprs

// pest basics
COMMENT = _{ ";" ~ (!NEWLINE ~ ANY)* }
WHITESPACE = _{ " " | "\t" | "\\" ~ NEWLINE }

// numbers
int = @{ "-"? ~ ASCII_DIGIT+ }
float = @{ "-"? ~ ASCII_DIGIT* ~ "." ~ ASCII_DIGIT+ }

number = _{ float | int }

// operators and basic math
operator = _{ add | sub | mul | div | cmp }
add      = { "+" }
sub 	 = { "-" }
mul 	 = { "*" }
div      = { "/" }

cmp = _ { gt | ge | lt | le | eq }
gt = { ">" }
ge = { ">=" }
lt = { "<" }
le = { "<=" }
eq = { "=" }

// nil
nil = { "nil" }

// strings

// stole this from the pest book
string = ${ "\"" ~ string_inner ~ "\"" }
string_inner = @{ char* }
char = {
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

// symbols, like from clojure or ruby
symbol = @{ ":" ~  string_inner }

// booleans
boolean = @{ "true" | "false" }

// identifiers are user-defined values associated to a name
identifier = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "-" | "_" | "!" | "?" | "$" | "%" | "*" | "^" | "+")+? }

// pre-defined function names
keyword = _{  "quote" | "atom" | "eq" | "cons" | "cond" | "car" | "cdr" | "if" | "do" | "def" | "let" | "vector" | "fn" }

// tokens are pre-defined, built-in functions 
token = @{ operator | keyword }

// atoms
atom = { nil | number | boolean | string | token | identifier }

// lists
list = { "(" ~ ")" | "(" ~ (expr)+ ~ ")" }

// clojure-like vectors
vector = {
    "[" ~ "]" |
    "[" ~ (atom | list)* ~ "]"
}

expr = _{ atom | list | vector }

repl_line = _{ expr+ }