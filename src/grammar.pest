// TODO see this for inspiration https://www.scheme.com/tspl2d/grammar.html

// TODO generalize such that the grammar is basically just a list of exprs

// pest basics
WHITESPACE = _{ " " | "\t" }
COMMENT = @{ ";" ~ ANY* }

// numbers
int = @{ "-"? ~ ASCII_DIGIT+ }
float = @{ "-"? ~ ASCII_DIGIT* ~ "." ~ ASCII_DIGIT+ }

number = _{ float | int }

// operators and basic math
operator = _{ add | sub | mul | div }
add      = { "+" }
sub 	 = { "-" }
mul 	 = { "*" }
div      = { "/" }

// nil
nil = { "nil" }

// strings

// stole this from the pest book
string = ${ "\"" ~ inner ~ "\"" }
inner = @{ char* }
char = {
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

// booleans
boolean = @{ "true" | "false" }

// identifiers are user-defined values associated to a name
identifier = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "-" | "_" | "!" | "$" | "%" | "*" | "^" | "+")+? }

// symbols are pre-defined, built-in functions
symbol = @{ "+" | "-" | "*" | "/" }

// atoms
atom = { nil | number | boolean | string | symbol | identifier }

// lists
list = { "(" ~ (atom | list)+ ~ ")" }
repl_line = _{ atom+ | list+ }
// list_expr = _{ "(" ~ (atom | list)+ ~ ")" }

let_binding = { "[" ~ (symbol ~ expr)+ ~ "]" }
func_binding = { "[" ~ symbol* ~ "]" }

// expressions
expr = _{ atom | op_expr | list | do_expr | if_expr | def | func_expr }

def = _{ def_expr | let_bind | func_def }

// TODO generalize "(" ~ expr ~ ")"

// TODO generalize function calls, make ops "builtin" functions

// operations, like (+ 1 2)
op_expr = { "(" ~ operator ~ expr+ ~ ")" }

// def expressions, such as (def a 2)
// TODO should these be recursive?
def_expr = { "(" ~ "def" ~ symbol ~ expr ~ ")" }

// let binding, like (let [a 2] (+ a 2))
let_bind = { "(" ~ "let" ~ var_bind ~ expr+ ~ ")" }

// stealing a page out of clojure...
var_bind = _{ "[" ~ symbol ~ expr ~ "]" } // TODO can this be reused?

do_expr = { "(" ~ "do" ~ expr+ ~ ")" }

// if expr, like (if (= a 2) "equal" "not equal")
if_expr = { "(" ~ "if" ~ expr ~ expr ~ expr ~ ")" }

// an example: (def adder [a b] => (+ a b))
// TODO do I need parentheses?
func_def = { func_args ~ "=>" ~ expr }

func_args = { "[" ~ symbol* ~ "]" }

func_expr = { "(" ~ symbol ~ expr* ~ ")" }

// defines Dial program
form = _{ expr+ | COMMENT }

// repl_line = _{ form }